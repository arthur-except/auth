<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">


	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:application.properties</value>
			</list>
		</property>
	</bean>

	<context:component-scan base-package="com.arthur.auth" />

	<tx:annotation-driven />

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- mybatis configuration for entity alias -->
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
	</bean>

	<!-- transactionManager for mybatis -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- scanner mapper package to enable autowired -->
	<bean id="mappers" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.arthur.auth.mapper" />
	</bean>


	<!-- druid dataSource -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${druid.datasource.url}" />
		<property name="username" value="${druid.datasource.username}" />
		<property name="password" value="${druid.datasource.password}" />
		
		<!-- HSQL DB -->
		<!-- <property name="url" value="${hsql.datasource.url}" />
		<property name="username" value="${hsql.datasource.username}" />
		<property name="password" value="${hsql.datasource.password}" /> -->

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${druid.datasource.initialSize}" />
		<property name="minIdle" value="${druid.datasource.minIdle}" />
		<property name="maxActive" value="${druid.datasource.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<!-- <property name="maxWait" value="${druid.datasource.maxWait}" /> -->

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis"
			value="${druid.datasource.timeBetweenEvictionRunsMillis}" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis"
			value="${druid.datasource.minEvictableIdleTimeMillis}" />

		<property name="validationQuery" value="${druid.datasource.validationQuery}" />
		<property name="testWhileIdle" value="${druid.datasource.testWhileIdle}" />
		<property name="testOnBorrow" value="${druid.datasource.testOnBorrow}" />
		<property name="testOnReturn" value="${druid.datasource.testOnReturn}" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="${druid.datasource.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="${druid.datasource.maxPoolPreparedStatementPerConnectionSize}" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="${druid.datasource.filters}" />
	</bean>


</beans>